{"version":3,"sources":["../../../../src/lib/coordinates/TimeIndicator.js"],"names":["React","TimeIndicator","width","height","fill","x","y","calcTimeToEnd","minutes","nowTimestamp","Math","floor","Date","now","divider","endTimestamp","timeFormat","num","val","sec","hours","seconds"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,gBAAgB,SAAhBA,aAAgB,OAAmC;AAAA,MAAhCC,KAAgC,QAAhCA,KAAgC;AAAA,MAAzBC,MAAyB,QAAzBA,MAAyB;AAAA,MAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,MAAXC,CAAW,QAAXA,CAAW;AAAA,MAARC,CAAQ,QAARA,CAAQ;;AACvD,MAAI,CAACJ,KAAD,IAAU,CAACC,MAAf,EAAuB;AACrB,WAAO,IAAP;AACD;;AAED,SACE;AAAA;AAAA;AACE,gCACM,EAAED,YAAF,EAASC,cAAT,EAAiBC,UAAjB,EAAuBC,IAAvB,EAA0BC,IAA1B,EADN,CADF;AAIE;AAAA;AAAA;AACE,aAAK,CADP;AAEE,WAAGD,CAFL;AAGE,WAAGC,IAAIH,SAAS,CAHlB;AAIE,kBAAU,EAJZ;AAKE,YAAG,OALL;AAME,cAAK;AANP;AAQGI,oBAAc,CAAd;AARH;AAJF,GADF;AAiBD,CAtBD;;AAwBA,eAAeN,aAAf;;AAEA,IAAMM,gBAAgB,SAAhBA,aAAgB,CAACC,OAAD,EAAa;AACjC,MAAMC,eAAeC,KAAKC,KAAL,CAAWC,KAAKC,GAAL,KAAa,IAAxB,CAArB;AACA,MAAMC,UAAUN,UAAU,EAA1B;AACA,MAAMO,eAAe,CAACL,KAAKC,KAAL,CAAWF,eAAeK,OAA1B,IAAqC,CAAtC,IAA2CA,OAAhE;AACA,SAAOE,WAAWD,eAAeN,YAA1B,CAAP;AACD,CALD;;AAOA,IAAMQ,MAAM,SAANA,GAAM,CAACC,GAAD,EAAS;AACnBA,QAAMR,KAAKC,KAAL,CAAWO,GAAX,CAAN;AACA,SAAOA,MAAM,EAAN,SAAeA,GAAf,GAAuBA,GAA9B;AACD,CAHD;;AAKA,IAAMF,aAAa,SAAbA,UAAa,CAACG,GAAD,EAAS;AAC1B,MAAMC,QAAQD,MAAM,IAAN,GAAa,EAA3B;AACA,MAAMX,UAAUW,MAAM,EAAN,GAAW,EAA3B;AACA,MAAME,UAAUF,MAAM,EAAtB;;AAEA,SAAUF,IAAIG,KAAJ,CAAV,SAAwBH,IAAIT,OAAJ,CAAxB,SAAwCS,IAAII,OAAJ,CAAxC;AACD,CAND","file":"TimeIndicator.js","sourcesContent":["import React from \"react\";\n\nconst TimeIndicator = ({ width, height, fill, x, y }) => {\n  if (!width || !height) {\n    return null;\n  }\n\n  return (\n    <g>\n      <rect\n        {...{ width, height, fill, x, y }}\n      />\n      <text\n        key={2}\n        x={x}\n        y={y + height / 2}\n        fontSize={12}\n        dy=\".32em\"\n        fill=\"white\"\n      >\n        {calcTimeToEnd(5)}\n      </text>\n    </g>\n  );\n};\n\nexport default TimeIndicator;\n\nconst calcTimeToEnd = (minutes) => {\n  const nowTimestamp = Math.floor(Date.now() / 1000);\n  const divider = minutes * 60;\n  const endTimestamp = (Math.floor(nowTimestamp / divider) + 1) * divider;\n  return timeFormat(endTimestamp - nowTimestamp);\n};\n\nconst num = (val) => {\n  val = Math.floor(val);\n  return val < 10 ? `0${val}` : val;\n};\n\nconst timeFormat = (sec) => {\n  const hours = sec / 3600 % 24;\n  const minutes = sec / 60 % 60;\n  const seconds = sec % 60;\n\n  return `${num(hours)}:${num(minutes)}:${num(seconds)}`;\n};\n"]}