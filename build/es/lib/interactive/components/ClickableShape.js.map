{"version":3,"sources":["../../../../../src/lib/interactive/components/ClickableShape.js"],"names":["React","Component","PropTypes","GenericChartComponent","getMouseCanvas","isHovering2","generateLine","hexToRGBA","getStrokeDasharray","Times","ClickableShape","props","saveNode","bind","drawOnCanvas","renderSVG","isHover","node","moreProps","mouseXY","closeIcon","x1","y1","x2","y2","ctx","stroke","strokeWidth","strokeOpacity","hovering","textBox","helper","x","y","beginPath","lineWidth","strokeStyle","halfWidth","width","moveTo","lineTo","fill","strokeDasharray","text","fontFamily","fontSize","textAnchor","icon","line","textCoordinate","interactiveCursorClass","show","onHover","onUnHover","onClick","yValue","textWidth","at","chartConfig","yScale","left","padding","textRightBorder","right","iconLeftBorder","propTypes","oneOf","string","isRequired","number","object","bool","func","defaultProps","fillOpacity"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAOC,qBAAP,MAAkC,6BAAlC;AACA,SAASC,cAAT,QAA+B,wBAA/B;;AAEA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,gBAA1C;AACA,SAASC,SAAT,EAAoBC,kBAApB,QAA8C,aAA9C;AACA,OAAOC,KAAP,MAAkB,SAAlB;;IAEMC,c;;;AACJ,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA,gIACXA,KADW;;AAEjB,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,OAApB;AACA,UAAKE,SAAL,GAAiB,MAAKA,SAAL,CAAeF,IAAf,OAAjB;AACA,UAAKG,OAAL,GAAe,MAAKA,OAAL,CAAaH,IAAb,OAAf;AALiB;AAMlB;;;;6BAEQI,I,EAAM;AACb,WAAKA,IAAL,GAAYA,IAAZ;AACD;;;4BAEOC,S,EAAW;AAAA,UACTC,OADS,GACGD,SADH,CACTC,OADS;;AAEjB,UAAI,KAAKC,SAAT,EAAoB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAIf,YAAY,CAAC,KAAKe,SAAL,CAAeC,EAAhB,EAAoB,KAAKD,SAAL,CAAeE,EAAnC,CAAZ,EAAoD,CAAC,KAAKF,SAAL,CAAeG,EAAhB,EAAoB,KAAKH,SAAL,CAAeI,EAAnC,CAApD,EAA4FL,OAA5F,EAAqG,CAArG,CAAJ,EAA6G;AAC3G,iBAAO,IAAP;AACD;AACF;AACD,aAAO,KAAP;AACD;;;iCAEYM,G,EAAKP,S,EAAW;AAAA,mBACuC,KAAKP,KAD5C;AAAA,UACnBe,MADmB,UACnBA,MADmB;AAAA,UACXC,WADW,UACXA,WADW;AAAA,UACEC,aADF,UACEA,aADF;AAAA,UACiBC,QADjB,UACiBA,QADjB;AAAA,UAC2BC,OAD3B,UAC2BA,OAD3B;;AAAA,oBAGZC,OAAO,KAAKpB,KAAZ,EAAmBO,SAAnB,EAA8BO,GAA9B,CAHY;AAAA;AAAA,UAGpBO,CAHoB;AAAA,UAGjBC,CAHiB;;AAK3B,WAAKb,SAAL,GAAiB,EAAEY,IAAF,EAAKC,IAAL,EAAjB;AACAR,UAAIS,SAAJ;;AAEAT,UAAIU,SAAJ,GAAgBN,WAAWF,cAAc,CAAzB,GAA6BA,WAA7C;AACAF,UAAIW,WAAJ,GAAkB7B,UAAUmB,MAAV,EAAkBE,aAAlB,CAAlB;AACA,UAAMS,YAAYP,QAAQV,SAAR,CAAkBkB,KAAlB,GAA0B,CAA5C;AACAb,UAAIc,MAAJ,CAAWP,IAAIK,SAAf,EAA0BJ,IAAII,SAA9B;AACAZ,UAAIe,MAAJ,CAAWR,IAAIK,SAAf,EAA0BJ,IAAII,SAA9B;AACAZ,UAAIc,MAAJ,CAAWP,IAAIK,SAAf,EAA0BJ,IAAII,SAA9B;AACAZ,UAAIe,MAAJ,CAAWR,IAAIK,SAAf,EAA0BJ,IAAII,SAA9B;AACAZ,UAAIC,MAAJ;AACD;;;8BAESR,S,EAAW;AAAA,oBAC2F,KAAKP,KADhG;AAAA,UACXe,MADW,WACXA,MADW;AAAA,UACHC,WADG,WACHA,WADG;AAAA,UACUC,aADV,WACUA,aADV;AAAA,UACyBa,IADzB,WACyBA,IADzB;AAAA,UAC+BC,eAD/B,WAC+BA,eAD/B;AAAA,UACgDC,IADhD,WACgDA,IADhD;AAAA,UACsDC,UADtD,WACsDA,UADtD;AAAA,UACkEC,QADlE,WACkEA,QADlE;AAAA,UAC4EC,UAD5E,WAC4EA,UAD5E;;AAAA,qBAGEf,OAAO,KAAKpB,KAAZ,EAAmBO,SAAnB,EAA8B,EAA9B,CAHF;AAAA;AAAA,UAGZc,CAHY;AAAA,UAGTC,CAHS;AAAA,UAGNc,IAHM;;AAInB,WAAK3B,SAAL,GAAiB2B,IAAjB;AACA,UAAMC,OAAQ,oBAAC,KAAD;AACZ,gBAAQtB,MADI;AAEZ,qBAAaC,WAFD;AAGZ,YAAIoB,KAAK1B,EAHG;AAIZ,YAAI0B,KAAKzB,EAJG;AAKZ,YAAIyB,KAAKxB,EALG;AAMZ,YAAIwB,KAAKvB;AANG,QAAd;;AASA,UAAMyB,iBACJ;AAAA;AAAA;AACE,eAAK,CADP;AAEE,aAAGjB,CAFL;AAGE,aAAGC,CAHL;AAIE,sBAAYW,UAJd;AAKE,oBAAUC,QALZ;AAME,cAAG,OANL;AAOE,gBAAMnB,MAPR;AAQE,sBAAYoB;AARd;AAUGH;AAVH,OADF;;AAeA,aAAO,CACLM,cADK,EAELD,IAFK,CAAP;;AAKA;AACA;AACA;AACA;AACA;AACA;AACD;;;6BAEQ;AAAA,UACCE,sBADD,GAC4B,KAAKvC,KADjC,CACCuC,sBADD;AAAA,UAECC,IAFD,GAEU,KAAKxC,KAFf,CAECwC,IAFD;AAAA,oBAGiC,KAAKxC,KAHtC;AAAA,UAGCyC,OAHD,WAGCA,OAHD;AAAA,UAGUC,SAHV,WAGUA,SAHV;AAAA,UAGqBC,OAHrB,WAGqBA,OAHrB;;;AAKP,aAAOH,OACH,oBAAC,qBAAD,IAAuB,KAAK,KAAKvC,QAAjC;AACuB,gCAAwBsC,sBAD/C;AAEuB,iBAAS,KAAKlC,OAFrC;AAGuB,0BAAkBsC,OAHzC;AAIuB,iBAAS,KAAKvC,SAJrC;AAKuB,oBAAY,KAAKD,YALxC;AAMuB,sBAAcV,cANrC;AAOuB,iBAASgD,OAPhC;AAQuB,mBAAWC,SARlC;AASuB,gBAAQ,CAAC,KAAD,EAAQ,WAAR,EAAqB,MAArB;AAT/B,QADG,GAYH,IAZJ;AAaD;;;;EA7G0BpD,S;;AAgH7B,SAAS8B,MAAT,CAAgBpB,KAAhB,EAAuBO,SAAvB,EAA4C;AAAA,MAAVO,GAAU,uEAAJ,EAAI;AAAA,MAClC8B,MADkC,GACC5C,KADD,CAClC4C,MADkC;AAAA,MAC1BC,SAD0B,GACC7C,KADD,CAC1B6C,SAD0B;AAAA,MACf1B,OADe,GACCnB,KADD,CACfmB,OADe;AAAA,MACN2B,EADM,GACC9C,KADD,CACN8C,EADM;AAAA,8BAECvC,SAFD,CAElCwC,WAFkC;AAAA,MAEnBC,MAFmB,yBAEnBA,MAFmB;AAAA,MAEXrB,KAFW,yBAEXA,KAFW;;AAG1C,MAAML,IAAI0B,OAAOJ,MAAP,CAAV;AACA,MAAMvB,IAAIyB,OAAO,MAAP,GAAgB3B,QAAQ8B,IAAR,GAAe9B,QAAQ+B,OAAR,CAAgBD,IAA/C,GAAuDtB,QAAQR,QAAQQ,KAAhB,GAAwBR,QAAQ8B,IAAhC,GAAuC9B,QAAQ+B,OAAR,CAAgBD,IAAxH;AACA,MAAME,kBAAkB9B,IAAIwB,SAAJ,GAAgB1B,QAAQ+B,OAAR,CAAgBE,KAAxD;AACA,MAAMC,iBAAiBF,kBAAkBhC,QAAQV,SAAR,CAAkByC,OAAlB,CAA0BD,IAAnE;AACA,MAAMb,OAAO;AACX1B,QAAI2C,cADO;AAEX1C,QAAIW,IAAKH,QAAQV,SAAR,CAAkBkB,KAAlB,GAA0B,CAFxB;AAGXf,QAAIyC,iBAAiBlC,QAAQV,SAAR,CAAkBkB,KAH5B;AAIXd,QAAIS,IAAKH,QAAQV,SAAR,CAAkBkB,KAAlB,GAA0B;AAJxB,GAAb;;AAQA,SAAO,CAACN,CAAD,EAAIC,CAAJ,EAAOc,IAAP,CAAP;AAED;;AAEDrC,eAAeuD,SAAf,GAA2B;AACzBR,MAAIvD,UAAUgE,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,CADqB;AAEzBxC,UAAQxB,UAAUiE,MAAV,CAAiBC,UAFA;AAGzBxC,iBAAe1B,UAAUmE,MAAV,CAAiBD,UAHP;AAIzBzC,eAAazB,UAAUmE,MAAV,CAAiBD,UAJL;AAKzBtC,WAAS5B,UAAUoE,MAAV,CAAiBF,UALD;AAMzBvC,YAAU3B,UAAUqE,IANK;AAOzBrB,0BAAwBhD,UAAUiE,MAPT;AAQzBhB,QAAMjD,UAAUqE,IARS;AASzBnB,WAASlD,UAAUsE,IATM;AAUzBnB,aAAWnD,UAAUsE,IAVI;AAWzBlB,WAASpD,UAAUsE,IAXM;AAYzBhB,aAAWtD,UAAUmE,MAAV,CAAiBD;AAZH,CAA3B;;AAgBA1D,eAAe+D,YAAf,GAA8B;AAC5BhB,MAAI,OADwB;AAE5BN,QAAM,KAFsB;AAG5BuB,eAAa,CAHe;AAI5B9C,iBAAe,CAJa;AAK5BD,eAAa,CALe;AAM5B6B,aAAW;AANiB,CAA9B;;AASA,eAAe9C,cAAf","file":"ClickableShape.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport GenericChartComponent from \"../../GenericChartComponent\";\nimport { getMouseCanvas } from \"../../GenericComponent\";\n\nimport { isHovering2, generateLine } from \"./StraightLine\";\nimport { hexToRGBA, getStrokeDasharray } from \"../../utils\";\nimport Times from './Times';\n\nclass ClickableShape extends Component {\n  constructor(props) {\n    super(props);\n    this.saveNode = this.saveNode.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n    this.renderSVG = this.renderSVG.bind(this);\n    this.isHover = this.isHover.bind(this);\n  }\n\n  saveNode(node) {\n    this.node = node;\n  }\n\n  isHover(moreProps) {\n    const { mouseXY } = moreProps;\n    if (this.closeIcon) {\n      // const { textBox } = this.props;\n      // const { x, y } = this.closeIcon;\n      // const halfWidth = textBox.closeIcon.width / 2;\n      //\n      // const start1 = [x - halfWidth, y - halfWidth];\n      // const end1 = [x + halfWidth, y + halfWidth];\n      // const start2 = [x - halfWidth, y + halfWidth];\n      // const end2 = [x + halfWidth, y - halfWidth];\n      if (isHovering2([this.closeIcon.x1, this.closeIcon.y1], [this.closeIcon.x2, this.closeIcon.y2], mouseXY, 3)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  drawOnCanvas(ctx, moreProps) {\n    const { stroke, strokeWidth, strokeOpacity, hovering, textBox } = this.props;\n\n    const [x, y] = helper(this.props, moreProps, ctx);\n\n    this.closeIcon = { x, y };\n    ctx.beginPath();\n\n    ctx.lineWidth = hovering ? strokeWidth + 1 : strokeWidth;\n    ctx.strokeStyle = hexToRGBA(stroke, strokeOpacity);\n    const halfWidth = textBox.closeIcon.width / 2;\n    ctx.moveTo(x - halfWidth, y - halfWidth);\n    ctx.lineTo(x + halfWidth, y + halfWidth);\n    ctx.moveTo(x - halfWidth, y + halfWidth);\n    ctx.lineTo(x + halfWidth, y - halfWidth);\n    ctx.stroke();\n  }\n\n  renderSVG(moreProps) {\n    const { stroke, strokeWidth, strokeOpacity, fill, strokeDasharray, text, fontFamily, fontSize, textAnchor } = this.props;\n\n    const [x, y, icon] = helper(this.props, moreProps, {});\n    this.closeIcon = icon;\n    const line = (<Times\n      stroke={stroke}\n      strokeWidth={strokeWidth}\n      x1={icon.x1}\n      y1={icon.y1}\n      x2={icon.x2}\n      y2={icon.y2}\n    />);\n\n    const textCoordinate = (\n      <text\n        key={2}\n        x={x}\n        y={y}\n        fontFamily={fontFamily}\n        fontSize={fontSize}\n        dy=\".32em\"\n        fill={stroke}\n        textAnchor={textAnchor}\n      >\n        {text}\n      </text>\n    );\n\n    return [\n      textCoordinate,\n      line\n    ];\n\n    // return <circle cx={x} cy={y} r={r}\n    // \t\t\t   strokeWidth={strokeWidth}\n    // \t\t\t   stroke={stroke}\n    // \t\t\t   strokeOpacity={strokeOpacity}\n    // \t\t\t   fill={fill}\n    // />;\n  }\n\n  render() {\n    const { interactiveCursorClass } = this.props;\n    const { show } = this.props;\n    const { onHover, onUnHover, onClick } = this.props;\n\n    return show\n      ? <GenericChartComponent ref={this.saveNode}\n                               interactiveCursorClass={interactiveCursorClass}\n                               isHover={this.isHover}\n                               onClickWhenHover={onClick}\n                               svgDraw={this.renderSVG}\n                               canvasDraw={this.drawOnCanvas}\n                               canvasToDraw={getMouseCanvas}\n                               onHover={onHover}\n                               onUnHover={onUnHover}\n                               drawOn={[\"pan\", \"mousemove\", \"drag\"]}\n      />\n      : null;\n  }\n}\n\nfunction helper(props, moreProps, ctx = {}) {\n  const { yValue, textWidth, textBox, at } = props;\n  const { chartConfig: { yScale, width } } = moreProps;\n  const y = yScale(yValue);\n  const x = at === \"left\" ? textBox.left + textBox.padding.left : (width - textBox.width - textBox.left + textBox.padding.left);\n  const textRightBorder = x + textWidth + textBox.padding.right;\n  const iconLeftBorder = textRightBorder + textBox.closeIcon.padding.left;\n  const icon = {\n    x1: iconLeftBorder,\n    y1: y - (textBox.closeIcon.width / 2),\n    x2: iconLeftBorder + textBox.closeIcon.width,\n    y2: y + (textBox.closeIcon.width / 2)\n  };\n\n\n  return [x, y, icon];\n\n}\n\nClickableShape.propTypes = {\n  at: PropTypes.oneOf([\"left\", \"right\"]),\n  stroke: PropTypes.string.isRequired,\n  strokeOpacity: PropTypes.number.isRequired,\n  strokeWidth: PropTypes.number.isRequired,\n  textBox: PropTypes.object.isRequired,\n  hovering: PropTypes.bool,\n  interactiveCursorClass: PropTypes.string,\n  show: PropTypes.bool,\n  onHover: PropTypes.func,\n  onUnHover: PropTypes.func,\n  onClick: PropTypes.func,\n  textWidth: PropTypes.number.isRequired\n};\n\n\nClickableShape.defaultProps = {\n  at: 'right',\n  show: false,\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1,\n  textWidth: 30\n};\n\nexport default ClickableShape;\n"]}