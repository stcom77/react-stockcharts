{"version":3,"sources":["../../../../../src/lib/interactive/components/ClickableShape.js"],"names":["React","Component","PropTypes","GenericChartComponent","getMouseCanvas","isHovering2","generateLine","hexToRGBA","getStrokeDasharray","Times","ClickableShape","props","saveNode","bind","drawOnCanvas","renderSVG","isHover","node","moreProps","mouseXY","closeIcon","textBox","x","y","halfWidth","width","start1","end1","start2","end2","ctx","stroke","strokeWidth","strokeOpacity","hovering","helper","beginPath","lineWidth","strokeStyle","moveTo","lineTo","fill","strokeDasharray","text","fontFamily","fontSize","textAnchor","icon","line","x1","y1","x2","y2","textCoordinate","interactiveCursorClass","show","onHover","onUnHover","onClick","yValue","at","chartConfig","yScale","textWidth","left","padding","textRightBorder","right","iconLeftBorder","propTypes","oneOf","string","isRequired","number","object","bool","func","defaultProps","fillOpacity"],"mappings":"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","file":"ClickableShape.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport GenericChartComponent from \"../../GenericChartComponent\";\nimport { getMouseCanvas } from \"../../GenericComponent\";\n\nimport { isHovering2, generateLine } from \"./StraightLine\";\nimport { hexToRGBA, getStrokeDasharray } from \"../../utils\";\nimport Times from './Times';\n\nclass ClickableShape extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.saveNode = this.saveNode.bind(this);\n\t\tthis.drawOnCanvas = this.drawOnCanvas.bind(this);\n    this.renderSVG = this.renderSVG.bind(this);\n\t\tthis.isHover = this.isHover.bind(this);\n\t}\n\n\tsaveNode(node) {\n\t\tthis.node = node;\n\t}\n\n\tisHover(moreProps) {\n\t\tconst { mouseXY } = moreProps;\n\t\tif (this.closeIcon) {\n\t\t\tconst { textBox } = this.props;\n\t\t\tconst { x, y } = this.closeIcon;\n\t\t\tconst halfWidth = textBox.closeIcon.width / 2;\n\n\t\t\tconst start1 = [x - halfWidth, y - halfWidth];\n\t\t\tconst end1 = [x + halfWidth, y + halfWidth];\n\t\t\tconst start2 = [x - halfWidth, y + halfWidth];\n\t\t\tconst end2 = [x + halfWidth, y - halfWidth];\n\n\t\t\tif (isHovering2(start1, end1, mouseXY, 3) || isHovering2(start2, end2, mouseXY, 3)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tdrawOnCanvas(ctx, moreProps) {\n\t\tconst { stroke, strokeWidth, strokeOpacity, hovering, textBox } = this.props;\n\n\t\tconst [x, y] = helper(this.props, moreProps, ctx);\n\n\t\tthis.closeIcon = { x, y };\n\t\tctx.beginPath();\n\n\t\tctx.lineWidth = hovering ? strokeWidth + 1 : strokeWidth;\n\t\tctx.strokeStyle = hexToRGBA(stroke, strokeOpacity);\n\t\tconst halfWidth = textBox.closeIcon.width / 2;\n\t\tctx.moveTo(x - halfWidth, y - halfWidth);\n\t\tctx.lineTo(x + halfWidth, y + halfWidth);\n\t\tctx.moveTo(x - halfWidth, y + halfWidth);\n\t\tctx.lineTo(x + halfWidth, y - halfWidth);\n\t\tctx.stroke();\n\t}\n\n\trenderSVG(props, moreProps, ctx) {\n\t\tconst { stroke, strokeWidth, strokeOpacity, fill, strokeDasharray, text, fontFamily, fontSize, textAnchor } = props;\n\n    const [x, y, icon] = helper(this.props, moreProps, {});\n\n    const line = (<Times\n      stroke={stroke}\n      strokeWidth={strokeWidth}\n      x1={icon.x1}\n      y1={icon.y1}\n      x2={icon.x2}\n      y2={icon.y2}\n    />);\n\n    const textCoordinate = (\n      <text\n        key={2}\n        x={x}\n        y={y}\n        fontFamily={fontFamily}\n        fontSize={fontSize}\n        dy=\".32em\"\n        fill={stroke}\n        textAnchor={textAnchor}\n      >\n        {text}\n      </text>\n    );\n\n    return [\n      textCoordinate,\n      line\n    ];\n\n    // return <circle cx={x} cy={y} r={r}\n\t\t// \t\t\t   strokeWidth={strokeWidth}\n\t\t// \t\t\t   stroke={stroke}\n\t\t// \t\t\t   strokeOpacity={strokeOpacity}\n\t\t// \t\t\t   fill={fill}\n\t\t// />;\n\t}\n\n\trender() {\n\t\tconst { interactiveCursorClass } = this.props;\n\t\tconst { show } = this.props;\n\t\tconst { onHover, onUnHover, onClick } = this.props;\n\n\t\treturn show\n\t\t\t? <GenericChartComponent ref={this.saveNode}\n\t\t\t\t\t\t\t\t\t interactiveCursorClass={interactiveCursorClass}\n\t\t\t\t\t\t\t\t\t isHover={this.isHover}\n\t\t\t\t\t\t\t\t\t onClickWhenHover={onClick}\n\t\t\t\t\t\t\t\t\t svgDraw={this.renderSVG}\n\t\t\t\t\t\t\t\t\t canvasDraw={this.drawOnCanvas}\n\t\t\t\t\t\t\t\t\t canvasToDraw={getMouseCanvas}\n\t\t\t\t\t\t\t\t\t onHover={onHover}\n\t\t\t\t\t\t\t\t\t onUnHover={onUnHover}\n\t\t\t\t\t\t\t\t\t drawOn={[\"pan\", \"mousemove\", \"drag\"]}\n\t\t\t/>\n\t\t\t: null;\n\t}\n}\n\nfunction helper(props, moreProps, ctx = {}) {\n  const { yValue, text, textBox, at } = props;\n\n  const { chartConfig: { yScale, width } } = moreProps;\n\n  const textWidth = 20;\n  const y = yScale(yValue);\n  const x = at === \"left\" ? textBox.left + textBox.padding.left : (width - textBox.width - textBox.left + textBox.padding.left);\n\n  const textRightBorder = x + textWidth + textBox.padding.right;\n  const iconLeftBorder = textRightBorder + textBox.closeIcon.padding.left;\n  const icon = {\n    x1: iconLeftBorder,\n    y1: y - (textBox.closeIcon.width / 2),\n    x2: iconLeftBorder + textBox.closeIcon.width,\n    y2: y + (textBox.closeIcon.width / 2)\n  };\n\n\n  return [x, y, icon];\n\n}\n\nClickableShape.propTypes = {\n  at: PropTypes.oneOf([\"left\", \"right\"]),\n\tstroke: PropTypes.string.isRequired,\n\tstrokeOpacity: PropTypes.number.isRequired,\n\tstrokeWidth: PropTypes.number.isRequired,\n\ttextBox: PropTypes.object.isRequired,\n\thovering: PropTypes.bool,\n\tinteractiveCursorClass: PropTypes.string,\n\tshow: PropTypes.bool,\n\tonHover: PropTypes.func,\n\tonUnHover: PropTypes.func,\n\tonClick: PropTypes.func,\n};\n\n\nClickableShape.defaultProps = {\n  at: 'right',\n\tshow: false,\n\tfillOpacity: 1,\n\tstrokeOpacity: 1,\n\tstrokeWidth: 1,\n};\n\nexport default ClickableShape;\n"]}