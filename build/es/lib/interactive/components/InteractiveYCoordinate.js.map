{"version":3,"sources":["../../../../../src/lib/interactive/components/InteractiveYCoordinate.js"],"names":["React","Component","PropTypes","GenericChartComponent","getMouseCanvas","isDefined","noop","hexToRGBA","getStrokeDasharrayCanvas","getStrokeDasharray","drawOnCanvas","getYCoordinate","InteractiveYCoordinate","props","renderSVG","bind","isHover","moreProps","onHover","values","helper","x1","x2","y","rect","mouseXY","mouseX","mouseY","x","width","height","Math","abs","ctx","bgFill","bgOpacity","textFill","fontFamily","fontSize","fontStyle","fontWeight","stroke","strokeWidth","strokeOpacity","strokeDasharray","text","textBox","edge","selected","hovering","strokeStyle","beginPath","lineWidth","textBaseline","textAlign","font","padding","left","measureText","right","closeIcon","setLineDash","moveTo","lineTo","fillStyle","fillRect","strokeRect","fillText","newEdge","opacity","yValue","displayFormat","yCoord","rectWidth","rectHeight","textAnchor","textWidthProp","textWidth","line","textRect","interactiveCursorClass","onUnHover","onDragStart","onDrag","onDragComplete","at","chartConfig","yScale","domain","lowerYValue","upperYValue","round","propTypes","oneOf","string","isRequired","number","oneOfType","object","func","defaultClassName","tolerance","bool","defaultProps"],"mappings":"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","file":"InteractiveYCoordinate.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport GenericChartComponent from \"../../GenericChartComponent\";\nimport { getMouseCanvas } from \"../../GenericComponent\";\nimport { isDefined, noop, hexToRGBA, getStrokeDasharrayCanvas, getStrokeDasharray } from \"../../utils\";\nimport { drawOnCanvas } from \"../../coordinates/EdgeCoordinateV3\";\nimport { getYCoordinate } from \"../../coordinates/MouseCoordinateY\";\n\nclass InteractiveYCoordinate extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderSVG = this.renderSVG.bind(this);\n    this.drawOnCanvas = this.drawOnCanvas.bind(this);\n    this.isHover = this.isHover.bind(this);\n  }\n\n  isHover(moreProps) {\n    const { onHover } = this.props;\n\n    if (isDefined(onHover)) {\n      const values = helper(this.props, moreProps);\n      if (values == null) return false;\n\n      const { x1, x2, y, rect } = values;\n      const { mouseXY: [mouseX, mouseY] } = moreProps;\n\n      if (\n        mouseX >= rect.x\n        && mouseX <= rect.x + this.width\n        && mouseY >= rect.y\n        && mouseY <= rect.y + rect.height\n      ) {\n        return true;\n      }\n      if (\n        x1 <= mouseX\n        && x2 >= mouseX\n        && Math.abs(mouseY - y) < 4\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  drawOnCanvas(ctx, moreProps) {\n    const {\n      bgFill,\n      bgOpacity,\n\n      textFill,\n      fontFamily,\n      fontSize,\n\n      fontStyle,\n      fontWeight,\n      stroke,\n      strokeWidth,\n      strokeOpacity,\n      strokeDasharray,\n      text,\n      textBox,\n      edge,\n    } = this.props;\n\n    const { selected, hovering } = this.props;\n\n    const values = helper(this.props, moreProps);\n    if (values == null) return;\n\n    const { x1, x2, y, rect } = values;\n\n    ctx.strokeStyle = hexToRGBA(stroke, strokeOpacity);\n\n    ctx.beginPath();\n    if (selected || hovering) {\n      ctx.lineWidth = strokeWidth + 1;\n    } else {\n      ctx.lineWidth = strokeWidth;\n    }\n    ctx.textBaseline = \"middle\";\n    ctx.textAlign = \"start\";\n    ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n\n    this.width = textBox.padding.left\n      + ctx.measureText(text).width\n      + textBox.padding.right\n      + textBox.closeIcon.padding.left\n      + textBox.closeIcon.width\n      + textBox.closeIcon.padding.right;\n\n    ctx.setLineDash(getStrokeDasharrayCanvas(strokeDasharray));\n    ctx.moveTo(x1, y);\n    ctx.lineTo(rect.x, y);\n\n    ctx.moveTo(rect.x + this.width, y);\n    ctx.lineTo(x2, y);\n    ctx.stroke();\n\n    ctx.setLineDash([]);\n\n\n    ctx.fillStyle = hexToRGBA(bgFill, bgOpacity);\n\n    ctx.fillRect(rect.x, rect.y, this.width, rect.height);\n    ctx.strokeRect(rect.x, rect.y, this.width, rect.height);\n\n    ctx.fillStyle = textFill;\n\n    ctx.beginPath();\n    ctx.fillText(text, rect.x + 10, y);\n    const newEdge = {\n      ...edge,\n      textFill,\n      fontFamily,\n      fontSize,\n      opacity: bgOpacity\n    };\n    const yValue = edge.displayFormat(this.props.yValue);\n    const yCoord = getYCoordinate(y, yValue, newEdge, moreProps);\n    drawOnCanvas(ctx, yCoord);\n  }\n\n  renderSVG(moreProps) {\n    const {\n      bgFill,\n      bgOpacity,\n\n      textFill,\n      fontFamily,\n      fontSize,\n\n      fontStyle,\n      fontWeight,\n      stroke,\n      strokeWidth,\n      strokeOpacity,\n      strokeDasharray,\n      text,\n      textBox,\n      edge,\n      rectWidth,\n      rectHeight,\n      textAnchor,\n      textWidth: textWidthProp\n    } = this.props;\n\n    const { selected, hovering } = this.props;\n\n    const values = helper(this.props, moreProps);\n    if (values == null) return;\n\n    const { x1, x2, y, rect } = values;\n\n    const textWidth = textBox.padding.left\n      + textWidthProp\n      + textBox.padding.right\n      + textBox.closeIcon.padding.left\n      + textBox.closeIcon.width\n      + textBox.closeIcon.padding.right;\n\n    const line = (\n      <line\n        key={1}\n        strokeOpacity={strokeOpacity}\n        stroke={stroke}\n        strokeWidth={strokeWidth}\n        strokeDasharray={getStrokeDasharray(strokeDasharray)}\n        x1={x1}\n        y1={y}\n        x2={x2}\n        y2={y}\n      />\n    );\n\n    const textRect = (\n      <rect\n        key={3}\n        x={rect.x}\n        y={rect.y}\n        height={rect.height}\n        width={textWidth}\n        fill={bgFill}\n        opacity={bgOpacity}\n        strokeWidth={strokeWidth}\n        stroke={stroke}\n        strokeOpacity={strokeOpacity}\n      />\n    );\n    return (\n      [\n        line,\n        textRect\n      ]\n    );\n  }\n\n  render() {\n    const { interactiveCursorClass } = this.props;\n    const { onHover, onUnHover } = this.props;\n    const { onDragStart, onDrag, onDragComplete } = this.props;\n\n    return (\n      <GenericChartComponent\n        clip={false}\n        xxxyyy\n        isHover={this.isHover}\n\n        svgDraw={this.renderSVG}\n        canvasToDraw={getMouseCanvas}\n        canvasDraw={this.drawOnCanvas}\n\n        interactiveCursorClass={interactiveCursorClass}\n        /* selected={selected} */\n        enableDragOnHover\n\n        onDragStart={onDragStart}\n        onDrag={onDrag}\n        onDragComplete={onDragComplete}\n        onHover={onHover}\n        onUnHover={onUnHover}\n\n        drawOn={[\"mousemove\", \"mouseleave\", \"pan\", \"drag\"]}\n      />\n    );\n  }\n}\n\nfunction helper(props, moreProps) {\n  const { yValue, textBox, at } = props;\n  const { chartConfig: { width, yScale, height } } = moreProps;\n  const [lowerYValue, upperYValue] = yScale.domain();\n\n  const y = Math.round(yScale(yValue));\n  // const coordinate = yScale.invert(y);\n\n  if (y >= 0 && y <= height) {\n    const rect = {\n      x: (at === 'left' ? textBox.left : width - textBox.width - textBox.left),\n      y: y - (textBox.height / 2),\n      height: textBox.height,\n      width: textBox.padding.left + textBox.padding.right + textBox.closeIcon.width + textBox.closeIcon.padding.left + textBox.closeIcon.padding.right\n    };\n\n    return {\n      x1: 0,\n      x2: width,\n      y,\n      rect,\n    };\n  }\n\n}\n\nInteractiveYCoordinate.propTypes = {\n  at: PropTypes.oneOf([\"left\", \"right\"]),\n  bgFill: PropTypes.string.isRequired,\n  bgOpacity: PropTypes.number.isRequired,\n\n  stroke: PropTypes.string.isRequired,\n  strokeWidth: PropTypes.number.isRequired,\n  strokeOpacity: PropTypes.number.isRequired,\n  strokeDasharray: PropTypes.string.isRequired,\n\n  textFill: PropTypes.string.isRequired,\n  fontFamily: PropTypes.string.isRequired,\n  fontSize: PropTypes.number.isRequired,\n  fontWeight: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]).isRequired,\n  fontStyle: PropTypes.string.isRequired,\n\n  text: PropTypes.string.isRequired,\n  edge: PropTypes.object.isRequired,\n  textBox: PropTypes.object.isRequired,\n  yValue: PropTypes.number.isRequired,\n\n  onDragStart: PropTypes.func.isRequired,\n  onDrag: PropTypes.func.isRequired,\n  onDragComplete: PropTypes.func.isRequired,\n  onHover: PropTypes.func,\n  onUnHover: PropTypes.func,\n\n  defaultClassName: PropTypes.string,\n  interactiveCursorClass: PropTypes.string,\n\n  tolerance: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  hovering: PropTypes.bool.isRequired,\n};\n\nInteractiveYCoordinate.defaultProps = {\n  at: 'right',\n  onDragStart: noop,\n  onDrag: noop,\n  onDragComplete: noop,\n\n  fontWeight: \"normal\", // standard dev\n\n  strokeWidth: 1,\n  tolerance: 4,\n  selected: false,\n  hovering: false,\n};\n\nexport default InteractiveYCoordinate;\n"]}