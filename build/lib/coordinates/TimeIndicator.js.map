{"version":3,"sources":["../../../src/lib/coordinates/TimeIndicator.js"],"names":["TimeIndicator","width","height","fill","x","y","calcTimeToEnd","minutes","nowTimestamp","Math","floor","Date","now","divider","endTimestamp","timeFormat","num","val","sec","hours","seconds"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,OAAmC;AAAA,KAAhCC,KAAgC,QAAhCA,KAAgC;AAAA,KAAzBC,MAAyB,QAAzBA,MAAyB;AAAA,KAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,KAAXC,CAAW,QAAXA,CAAW;AAAA,KAARC,CAAQ,QAARA,CAAQ;;AACxD,KAAI,CAACJ,KAAD,IAAU,CAACC,MAAf,EAAuB;AACtB,SAAO,IAAP;AACA;;AAED,QACC;AAAA;AAAA;AACC,wCACK,EAAED,YAAF,EAASC,cAAT,EAAiBC,UAAjB,EAAuBC,IAAvB,EAA0BC,IAA1B,EADL,CADD;AAIC;AAAA;AAAA;AACC,SAAK,CADN;AAEC,OAAGD,CAFJ;AAGC,OAAGC,IAAIH,SAAS,CAHjB;AAIC,cAAU,EAJX;AAKC,QAAG,OALJ;AAMC,UAAK;AANN;AAQEI,iBAAc,CAAd;AARF;AAJD,EADD;AAiBA,CAtBD;;kBAwBeN,a;;;AAEf,IAAMM,gBAAgB,SAAhBA,aAAgB,CAACC,OAAD,EAAa;AAClC,KAAMC,eAAeC,KAAKC,KAAL,CAAWC,KAAKC,GAAL,KAAa,IAAxB,CAArB;AACA,KAAMC,UAAUN,UAAU,EAA1B;AACA,KAAMO,eAAe,CAACL,KAAKC,KAAL,CAAWF,eAAeK,OAA1B,IAAqC,CAAtC,IAA2CA,OAAhE;AACA,QAAOE,WAAWD,eAAeN,YAA1B,CAAP;AACA,CALD;;AAOA,IAAMQ,MAAM,SAANA,GAAM,CAACC,GAAD,EAAS;AACpBA,OAAMR,KAAKC,KAAL,CAAWO,GAAX,CAAN;AACA,QAAOA,MAAM,EAAN,SAAeA,GAAf,GAAuBA,GAA9B;AACA,CAHD;;AAKA,IAAMF,aAAa,SAAbA,UAAa,CAACG,GAAD,EAAS;AAC3B,KAAMC,QAAQD,MAAM,IAAN,GAAa,EAA3B;AACA,KAAMX,UAAUW,MAAM,EAAN,GAAW,EAA3B;AACA,KAAME,UAAUF,MAAM,EAAtB;;AAEA,QAAUF,IAAIG,KAAJ,CAAV,SAAwBH,IAAIT,OAAJ,CAAxB,SAAwCS,IAAII,OAAJ,CAAxC;AACA,CAND","file":"TimeIndicator.js","sourcesContent":["import React from \"react\";\n\nconst TimeIndicator = ({ width, height, fill, x, y }) => {\n\tif (!width || !height) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<g>\n\t\t\t<rect\n\t\t\t\t{...{ width, height, fill, x, y }}\n\t\t\t/>\n\t\t\t<text\n\t\t\t\tkey={2}\n\t\t\t\tx={x}\n\t\t\t\ty={y + height / 2}\n\t\t\t\tfontSize={12}\n\t\t\t\tdy=\".32em\"\n\t\t\t\tfill=\"white\"\n\t\t\t>\n\t\t\t\t{calcTimeToEnd(5)}\n\t\t\t</text>\n\t\t</g>\n\t);\n};\n\nexport default TimeIndicator;\n\nconst calcTimeToEnd = (minutes) => {\n\tconst nowTimestamp = Math.floor(Date.now() / 1000);\n\tconst divider = minutes * 60;\n\tconst endTimestamp = (Math.floor(nowTimestamp / divider) + 1) * divider;\n\treturn timeFormat(endTimestamp - nowTimestamp);\n};\n\nconst num = (val) => {\n\tval = Math.floor(val);\n\treturn val < 10 ? `0${val}` : val;\n};\n\nconst timeFormat = (sec) => {\n\tconst hours = sec / 3600 % 24;\n\tconst minutes = sec / 60 % 60;\n\tconst seconds = sec % 60;\n\n\treturn `${num(hours)}:${num(minutes)}:${num(seconds)}`;\n};\n"]}